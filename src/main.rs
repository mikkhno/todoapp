use eframe::egui;
use serde::{Deserialize, Serialize};
use std::fs::File;
use std::io::{Read, Write};
use ron::ser::to_string;
use ron::de::from_str;

const FILE_NAME: &str = "tasks.txt";

#[derive(Clone, Serialize, Deserialize, Debug, Default)]
struct Task {
    id: usize,             // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è
    description: String,   // –û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è
    completed: bool,       // –°—Ç–∞–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
}

#[derive(Serialize, Deserialize, Default)]
struct TaskRepository {
    tasks: Vec<Task>,      // –ö–æ–ª–µ–∫—Ü—ñ—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
    next_id: usize,        // –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π ID
}

impl TaskRepository {
    /// –î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    fn add_task(&mut self, description: String) {
        self.tasks.push(Task {
            id: self.next_id,
            description,
            completed: false,
        });
        self.next_id += 1;
    }

    /// –†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ ID
    fn edit_task(&mut self, id: usize, description: String) {
        if let Some(task) = self.tasks.iter_mut().find(|task| task.id == id) {
            task.description = description;
        }
    }

    /// –í–∏–¥–∞–ª—è—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ ID
    fn delete_task(&mut self, id: usize) {
        self.tasks.retain(|task| task.id != id);
    }

    /// –ü–æ–∑–Ω–∞—á–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
    fn mark_completed(&mut self, id: usize) {
        if let Some(task) = self.tasks.iter_mut().find(|task| task.id == id) {
            task.completed = true;
        }
    }

    /// –ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å —É —Ñ–∞–π–ª
    fn save_to_file(&self) {
        if let Ok(data) = to_string(self) {
            if let Ok(mut file) = File::create(FILE_NAME) {
                file.write_all(data.as_bytes()).unwrap();
            }
        }
    }

    /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –∑ —Ñ–∞–π–ª—É
    fn load_from_file() -> Self {
        if let Ok(mut file) = File::open(FILE_NAME) {
            let mut contents = String::new();
            if file.read_to_string(&mut contents).is_ok() {
                if let Ok(repository) = from_str(&contents) {
                    return repository;
                }
            }
        }
        TaskRepository::default()
    }
}

/// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
fn main() {
    let options = eframe::NativeOptions::default();
    eframe::run_native(
        "–ó–∞–ø–∏—Å–Ω–∏—á–æ–∫",
        options,
        Box::new(|_cc| Box::new(ToDoApp::new())),
    );
}

/// –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
struct ToDoApp {
    manager: TaskRepository,   // –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
    new_description: String,   // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    edit_description: String,  // –ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    show_edit_popup: bool,     // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —á–∏ –ø—Ä–∏—Ö–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    edit_id_task: Option<usize>, // ID –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è
}

impl ToDoApp {
    /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫ —ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    fn new() -> Self {
        Self {
            manager: TaskRepository::load_from_file(),
            new_description: String::new(),
            edit_description: String::new(),
            show_edit_popup: false,
            edit_id_task: None,
        }
    }
}

impl eframe::App for ToDoApp {
    /// –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è GUI
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("üìù –ó–∞–ø–∏—Å–Ω–∏—á–æ–∫ v1.0");

            // –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            ui.group(|ui| {
                ui.horizontal(|ui| {
                    if self.new_description.is_empty() {
                        ui.label(egui::RichText::new("–Ø –º–∞—é –∑—Ä–æ–±–∏—Ç–∏...").italics().weak());
                    }
                    ui.text_edit_singleline(&mut self.new_description);
                    if ui.button("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è").clicked() && !self.new_description.is_empty() {
                        self.manager.add_task(self.new_description.clone());
                        self.new_description.clear();
                        self.manager.save_to_file();
                    }
                });

            });

            ui.separator();

            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            if self.manager.tasks.is_empty() {
                ui.label("‚ú® –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ. –ì—É–ª—è–π —Å–º—ñ–ª–æ!");
            } else {
                for task in self.manager.tasks.clone() {
                    ui.group(|ui| {
                        ui.horizontal(|ui| {
                            // –°—Ç–∏–ª—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
                            if task.completed {
                                ui.label(egui::RichText::new(&task.description).strikethrough());
                            } else {
                                ui.label(&task.description);
                            }

                            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                            if ui.button("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏").clicked() {
                                self.show_edit_popup = true;
                                self.edit_id_task = Some(task.id);
                                self.edit_description = task.description.clone();
                            }

                            // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                            if !task.completed {
                                if ui.button("‚úÖ –í–∏–∫–æ–Ω–∞–≤").clicked() {
                                    self.manager.mark_completed(task.id);
                                    self.manager.save_to_file();
                                }
                            }

                            // –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                            if ui.button("‚ùå –í–∏–ª—É—á–∏—Ç–∏").clicked() {
                                self.manager.delete_task(task.id);
                                self.manager.save_to_file();
                            }
                        });
                    });
                }
            }

            // –í—ñ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
            if self.show_edit_popup {
                egui::Window::new("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
                    .collapsible(false)
                    .resizable(false)
                    .show(ctx, |ui| {
                        ui.label("–ó–º—ñ–Ω–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:");
                        ui.text_edit_singleline(&mut self.edit_description);

                        ui.horizontal(|ui| {
                            if ui.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏").clicked() {
                                if let Some(task_id) = self.edit_id_task {
                                    self.manager.edit_task(task_id, self.edit_description.clone());
                                    self.manager.save_to_file();
                                }
                                self.show_edit_popup = false;
                            }

                            if ui.button("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏").clicked() {
                                self.show_edit_popup = false;
                            }
                        });
                    });
            }
        });
    }
}
